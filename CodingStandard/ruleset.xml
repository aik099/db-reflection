<?xml version="1.0"?>
<ruleset name="InPortal">
    <description>RepkaQA coding standard.</description>

	<rule ref="PSR1.Classes.ClassDeclaration"/>

    <rule ref="Generic">
		<exclude name="Generic.Formatting.MultipleStatementAlignment"/>
		<exclude name="Generic.Formatting.SpaceAfterCast"/>
		<exclude name="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>
		<exclude name="Generic.NamingConventions.ConstructorName"/>
		<exclude name="Generic.NamingConventions.CamelCapsFunctionName"/>
		<exclude name="Generic.NamingConventions.UpperCaseConstantName"/>
		<exclude name="Generic.PHP.UpperCaseConstant"/>
		<exclude name="Generic.PHP.ClosingPHPTag"/>
		<exclude name="Generic.VersionControl.SubversionProperties"/>
		<exclude name="Generic.WhiteSpace.DisallowTabIndent"/>
		<exclude name="Generic.WhiteSpace.ScopeIndent"/>
		<exclude name="Generic.Files.EndFileNewline"/>

		<!-- exclude because of multifile sniff, that eats a lot of memory, better to create a separate ruleset -->
		<exclude name="Generic.Classes.DuplicateClassName"/>
    </rule>

    <rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="120"/>
			<property name="absoluteLineLimit" value="140"/>
		</properties>
    </rule>

    <rule ref="Drupal.Array.Array"/>
    <rule ref="Drupal.Classes.ClassCreateInstance"/>
    <!--
    Find sniff, that checks for class opening brace on new line
    <rule ref="Drupal.Classes.ClassDeclaration"/>
    -->

	<rule ref="Squiz.Classes.ClassDeclaration"/>

    <rule ref="Drupal.ControlStructures.ControlSignature"/>
    <rule ref="Drupal.ControlStructures.ElseIf"/>
    <rule ref="Drupal.Formatting.ItemAssignment"/>
    <rule ref="Drupal.Formatting.SpaceOperator"/>
    <rule ref="Drupal.Formatting.SpaceUnaryOperator"/>
    <rule ref="Drupal.Strings.ConcatenationSpacing"/>

    <rule ref="MySource.PHP.EvalObjectFactory"/>

    <!--
    	Checks for aligned parameters
    	<rule ref="PEAR.Commenting.FunctionComment"/>
    -->

    <rule ref="PEAR.Commenting.InlineComment"/>
    <!--
    	Find a way how to check indentation with tabs for multi-line function calls
    	<rule ref="PEAR.Functions.FunctionCallSignature"/>
    -->
    <rule ref="PEAR.Functions.FunctionDeclaration"/>
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <rule ref="PEAR.NamingConventions.ValidVariableName"/>

    <rule ref="Squiz.Classes.LowercaseClassKeywords"/>
    <rule ref="Squiz.Classes.SelfMemberReference"/>

    	<!--Temporarily comment-out, because with have both "kUploadFormatter" and "UserEventHandler" class type-->
    	<rule ref="Squiz.Classes.ValidClassName"/>

    	<!--
    		Temporarily comment-out, because it considers @var type hinting comments as an error
    		<rule ref="Squiz.Commenting.BlockComment"/>
    	-->

    	<!--Temporarily comment-out, because all our license DocBlocks are incorrectly aligned-->
    	<rule ref="Squiz.Commenting.DocCommentAlignment"/>

    	<!--Temporarily comment-out, because we have a lots of DocBlocks (for functions) without short description-->
    	<rule ref="Squiz.Commenting.FunctionComment"/>
    	<rule ref="Squiz.Commenting.VariableComment"/>

    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>

	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1"/>
		</properties>
	</rule>

    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.GlobalFunction"/>

    <!--
    	Temporarily comment-out, because it reports every commented-out code as error
    	<rule ref="Squiz.PHP.CommentedOutCode"/>
    -->

    <rule ref="Squiz.PHP.DisallowObEndFlush"/>
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!--
    	Temporarily comment-out, because we know we still have a lot of places without scope set
		<rule ref="Squiz.Scope.MemberVarScope"/>
		<rule ref="Squiz.Scope.MethodScope"/>
    -->

    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

	<!--
		Temporarily comment-out, because it checks 2 empty lines between a functions and not 1 line + no way to configure
		TODO: maybe we can fork this class into our standard and parametrize it
	-->

	<rule ref="Squiz.WhiteSpace.FunctionSpacing">
		<properties>
			<property name="spacing" value="1"/>
		</properties>
	</rule>

    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

    <rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>

    <!--<rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing"/>-->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <rule ref="Zend.Files.ClosingTag"/>
</ruleset>
